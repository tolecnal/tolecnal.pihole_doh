---

- name: Check if /etc/netplan exists
  ansible.builtin.stat:
    path: /etc/netplan
  register: netplan_folder
  tags:
    - network

- name: Get a list of network cards
  ansible.builtin.shell:
    cmd: find /sys/class/net -mindepth 1 -maxdepth 1 -lname '*virtual*' -prune -o -printf '%f\n'
  register: network_cards
  changed_when: network_cards.rc != 0
  when: netplan_folder.stat.exists
  tags:
    - network

- name: Get a list of config files in /etc/netplan
  ansible.builtin.find:
    paths: "/etc/netplan/"
    patterns: "*.yaml"
    recurse: true
  register: netplan_files
  when: netplan_folder.stat.exists
  tags:
    - network

- name: Install yq python package
  ansible.builtin.pip:
    name: yq
  when: netplan_folder.stat.exists
  tags:
    - network

- name: Install jq apt package
  ansible.builtin.apt:
    pkg: jq
    state: present
  when: netplan_folder.stat.exists
  tags:
    - network

- name: Change permissions for netplan files
  ansible.builtin.file:
    path: "{{ item.path }}"
    owner: root
    group: root
    mode: "0600"
  with_items:
    - "{{ netplan_files.files }}"
  when: netplan_folder.stat.exists
  tags:
    - network

- name: Edit netplan files using yq
  ansible.builtin.shell:
    cmd: yq -i -y '.network.ethernets."{{ item[1] }}".nameservers.addresses = ["1.1.1.1"]' "{{ item[0].path }}"
  register: yq_res
  changed_when: yq_res.rc != 0
  with_nested:
    - "{{ netplan_files.files }}"
    - "{{ network_cards.stdout }}"
  when: netplan_folder.stat.exists
  tags:
    - network

- name: Gather service facts
  ansible.builtin.service_facts:

- name: Ensure the systemd-resolved service is stopped and disabled
  ansible.builtin.systemd_service:
    name: systemd-resolved
    state: stopped
    enabled: false
  when:
    - ansible_os_family == 'Debian'
    - "'systemd-resolved.service' in ansible_facts.services"
  tags:
    - network
